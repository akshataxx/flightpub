{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMemoizedArray = void 0;\n\nvar react_1 = require(\"react\");\n\nvar useMemoizedArray = function (externalArray) {\n  var prevArrayRef = react_1.useRef(externalArray);\n  var array = react_1.useMemo(function () {\n    if (prevArrayRef.current === externalArray) return prevArrayRef.current;\n\n    if (prevArrayRef.current.length !== externalArray.length) {\n      prevArrayRef.current = externalArray;\n      return externalArray;\n    }\n\n    for (var i = 0; i < externalArray.length; i += 1) {\n      if (externalArray[i] !== prevArrayRef.current[i]) {\n        prevArrayRef.current = externalArray;\n        return externalArray;\n      }\n    }\n\n    return prevArrayRef.current;\n  }, [externalArray]);\n  return array;\n};\n\nexports.useMemoizedArray = useMemoizedArray;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEO,IAAMA,gBAAgB,GAAG,UAA4BC,aAA5B,EAA8C;AAC5E,MAAMC,YAAY,GAAGC,eAAOF,aAAP,CAArB;AACA,MAAMG,KAAK,GAAGD,gBAAQ;AACpB,QAAID,YAAY,CAACG,OAAb,KAAyBJ,aAA7B,EAA4C,OAAOC,YAAY,CAACG,OAApB;;AAE5C,QAAIH,YAAY,CAACG,OAAb,CAAqBC,MAArB,KAAgCL,aAAa,CAACK,MAAlD,EAA0D;AACxDJ,kBAAY,CAACG,OAAb,GAAuBJ,aAAvB;AACA,aAAOA,aAAP;AACD;;AAED,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,aAAa,CAACK,MAAlC,EAA0CC,CAAC,IAAI,CAA/C,EAAkD;AAChD,UAAIN,aAAa,CAACM,CAAD,CAAb,KAAqBL,YAAY,CAACG,OAAb,CAAqBE,CAArB,CAAzB,EAAkD;AAChDL,oBAAY,CAACG,OAAb,GAAuBJ,aAAvB;AACA,eAAOA,aAAP;AACD;AACF;;AAED,WAAOC,YAAY,CAACG,OAApB;AACD,GAhBa,EAgBX,CAACJ,aAAD,CAhBW,CAAd;AAkBA,SAAOG,KAAP;AACD,CArBM;;AAAMI,2BAAgBR,gBAAhB","names":["useMemoizedArray","externalArray","prevArrayRef","react_1","array","current","length","i","exports"],"sources":["C:\\Users\\ewart\\OneDrive\\Documents\\GitHub\\flightpub\\client\\node_modules\\react-tiny-popover\\src\\useMemoizedArray.ts"],"sourcesContent":["import { useRef, useMemo } from 'react';\n\nexport const useMemoizedArray = <T extends number | string>(externalArray: T[]) => {\n  const prevArrayRef = useRef(externalArray);\n  const array = useMemo(() => {\n    if (prevArrayRef.current === externalArray) return prevArrayRef.current;\n\n    if (prevArrayRef.current.length !== externalArray.length) {\n      prevArrayRef.current = externalArray;\n      return externalArray;\n    }\n\n    for (let i = 0; i < externalArray.length; i += 1) {\n      if (externalArray[i] !== prevArrayRef.current[i]) {\n        prevArrayRef.current = externalArray;\n        return externalArray;\n      }\n    }\n\n    return prevArrayRef.current;\n  }, [externalArray]);\n\n  return array;\n};\n"]},"metadata":{},"sourceType":"script"}