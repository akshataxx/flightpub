{"ast":null,"code":"import cn from 'classnames';\nimport React, { useImperativeHandle, useRef, useState } from 'react';\nconst DropdownListInput = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  let {\n    name,\n    autoComplete,\n    value,\n    allowSearch,\n    placeholder,\n    textAccessor,\n    dataKeyAccessor,\n    searchTerm,\n    onSearch,\n    onAutofill,\n    onAutofillChange,\n    renderValue,\n    disabled,\n    readOnly\n  } = _ref;\n  const [autofilling, setAutofilling] = useState(false);\n  const searchRef = useRef(null);\n\n  const handleAutofillDetect = _ref2 => {\n    let {\n      animationName\n    } = _ref2;\n    let autofilling;\n    if (animationName === 'react-widgets-autofill-start') autofilling = true;else if (animationName === 'react-widgets-autofill-cancel') autofilling = false;else return;\n    setAutofilling(autofilling);\n    onAutofill(autofilling);\n  };\n\n  const handleAutofill = e => {\n    setAutofilling(false);\n    onAutofillChange(e);\n  };\n\n  let dataKey = dataKeyAccessor(value);\n  let text = value == null ? '' : textAccessor(value);\n  let strValue = String(dataKey != null ? dataKey : '');\n  if (strValue === String({})) strValue = '';\n  const inputValue = !value && placeholder ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"rw-placeholder\"\n  }, placeholder) : renderValue ? renderValue({\n    item: value,\n    dataKey,\n    text\n  }) : text;\n  useImperativeHandle(ref, () => ({\n    focus() {\n      if (searchRef.current) searchRef.current.focus();\n    }\n\n  })); // There is some interaction between unmounting the search and value inputs\n  // that cancels autofilling in Chrome, it may be due to an input the browser\n  // was considering suddenly disappeared. hiding it seems to avoid the issue\n\n  const style = autofilling ? {\n    display: 'none'\n  } : undefined;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rw-dropdown-list-input\"\n  }, autoComplete !== 'off' && /*#__PURE__*/React.createElement(\"input\", {\n    name: name,\n    tabIndex: -1,\n    disabled: disabled,\n    readOnly: readOnly,\n    value: strValue == null ? '' : strValue,\n    autoComplete: autoComplete,\n    onChange: handleAutofill,\n    onAnimationStart: handleAutofillDetect,\n    \"aria-hidden\": !autofilling,\n    className: cn('rw-detect-autofill', !autofilling && 'rw-sr')\n  }), /*#__PURE__*/React.createElement(React.Fragment, null, allowSearch && /*#__PURE__*/React.createElement(\"input\", {\n    ref: searchRef,\n    disabled: disabled,\n    readOnly: readOnly,\n    style: style,\n    className: \"rw-dropdownlist-search\",\n    autoComplete: \"off\",\n    value: searchTerm || '',\n    size: (searchTerm || '').length + 2,\n    onChange: onSearch\n  }), !searchTerm && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"rw-dropdown-list-value\",\n    style: style\n  }, inputValue)));\n});\nDropdownListInput.displayName = 'DropdownListInput';\nexport default DropdownListInput;","map":{"version":3,"sources":["C:/Users/ewart/OneDrive/Documents/GitHub/flightpub/client/node_modules/react-widgets/esm/DropdownListInput.js"],"names":["cn","React","useImperativeHandle","useRef","useState","DropdownListInput","forwardRef","ref","name","autoComplete","value","allowSearch","placeholder","textAccessor","dataKeyAccessor","searchTerm","onSearch","onAutofill","onAutofillChange","renderValue","disabled","readOnly","autofilling","setAutofilling","searchRef","handleAutofillDetect","animationName","handleAutofill","e","dataKey","text","strValue","String","inputValue","createElement","className","item","focus","current","style","display","undefined","tabIndex","onChange","onAnimationStart","Fragment","size","length","displayName"],"mappings":"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","sourcesContent":["import cn from 'classnames';\nimport React, { useImperativeHandle, useRef, useState } from 'react';\nconst DropdownListInput = /*#__PURE__*/React.forwardRef(function ({\n  name,\n  autoComplete,\n  value,\n  allowSearch,\n  placeholder,\n  textAccessor,\n  dataKeyAccessor,\n  searchTerm,\n  onSearch,\n  onAutofill,\n  onAutofillChange,\n  renderValue,\n  disabled,\n  readOnly\n}, ref) {\n  const [autofilling, setAutofilling] = useState(false);\n  const searchRef = useRef(null);\n\n  const handleAutofillDetect = ({\n    animationName\n  }) => {\n    let autofilling;\n    if (animationName === 'react-widgets-autofill-start') autofilling = true;else if (animationName === 'react-widgets-autofill-cancel') autofilling = false;else return;\n    setAutofilling(autofilling);\n    onAutofill(autofilling);\n  };\n\n  const handleAutofill = e => {\n    setAutofilling(false);\n    onAutofillChange(e);\n  };\n\n  let dataKey = dataKeyAccessor(value);\n  let text = value == null ? '' : textAccessor(value);\n  let strValue = String(dataKey != null ? dataKey : '');\n  if (strValue === String({})) strValue = '';\n  const inputValue = !value && placeholder ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"rw-placeholder\"\n  }, placeholder) : renderValue ? renderValue({\n    item: value,\n    dataKey,\n    text\n  }) : text;\n  useImperativeHandle(ref, () => ({\n    focus() {\n      if (searchRef.current) searchRef.current.focus();\n    }\n\n  })); // There is some interaction between unmounting the search and value inputs\n  // that cancels autofilling in Chrome, it may be due to an input the browser\n  // was considering suddenly disappeared. hiding it seems to avoid the issue\n\n  const style = autofilling ? {\n    display: 'none'\n  } : undefined;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rw-dropdown-list-input\"\n  }, autoComplete !== 'off' && /*#__PURE__*/React.createElement(\"input\", {\n    name: name,\n    tabIndex: -1,\n    disabled: disabled,\n    readOnly: readOnly,\n    value: strValue == null ? '' : strValue,\n    autoComplete: autoComplete,\n    onChange: handleAutofill,\n    onAnimationStart: handleAutofillDetect,\n    \"aria-hidden\": !autofilling,\n    className: cn('rw-detect-autofill', !autofilling && 'rw-sr')\n  }), /*#__PURE__*/React.createElement(React.Fragment, null, allowSearch && /*#__PURE__*/React.createElement(\"input\", {\n    ref: searchRef,\n    disabled: disabled,\n    readOnly: readOnly,\n    style: style,\n    className: \"rw-dropdownlist-search\",\n    autoComplete: \"off\",\n    value: searchTerm || '',\n    size: (searchTerm || '').length + 2,\n    onChange: onSearch\n  }), !searchTerm && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"rw-dropdown-list-value\",\n    style: style\n  }, inputValue)));\n});\nDropdownListInput.displayName = 'DropdownListInput';\nexport default DropdownListInput;"]},"metadata":{},"sourceType":"module"}