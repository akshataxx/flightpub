{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrowContainer = void 0;\n\nvar jsx_runtime_1 = require(\"react/jsx-runtime\");\n\nvar react_1 = require(\"react\");\n\nvar useArrowContainer_1 = require(\"./useArrowContainer\");\n\nvar ArrowContainer = function (_a) {\n  var childRect = _a.childRect,\n      popoverRect = _a.popoverRect,\n      position = _a.position,\n      arrowColor = _a.arrowColor,\n      arrowSize = _a.arrowSize,\n      arrowClassName = _a.arrowClassName,\n      externalArrowStyle = _a.arrowStyle,\n      className = _a.className,\n      children = _a.children,\n      externalArrowContainerStyle = _a.style;\n\n  var _b = useArrowContainer_1.useArrowContainer({\n    childRect: childRect,\n    popoverRect: popoverRect,\n    position: position,\n    arrowColor: arrowColor,\n    arrowSize: arrowSize\n  }),\n      arrowContainerStyle = _b.arrowContainerStyle,\n      arrowStyle = _b.arrowStyle;\n\n  var mergedContainerStyle = react_1.useMemo(function () {\n    return __assign(__assign({}, arrowContainerStyle), externalArrowContainerStyle);\n  }, [arrowContainerStyle, externalArrowContainerStyle]);\n  var mergedArrowStyle = react_1.useMemo(function () {\n    return __assign(__assign({}, arrowStyle), externalArrowStyle);\n  }, [arrowStyle, externalArrowStyle]);\n  return jsx_runtime_1.jsxs(\"div\", __assign({\n    className: className,\n    style: mergedContainerStyle\n  }, {\n    children: [jsx_runtime_1.jsx(\"div\", {\n      style: mergedArrowStyle,\n      className: arrowClassName\n    }, void 0), children]\n  }), void 0);\n};\n\nexports.ArrowContainer = ArrowContainer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEO,IAAMA,cAAc,GAA4B,UAACC,EAAD,EAWtD;MAVCC,SAAS;MACTC,WAAW;MACXC,QAAQ;MACRC,UAAU;MACVC,SAAS;MACTC,cAAc;MACFC,kBAAkB;MAC9BC,SAAS;MACTC,QAAQ;MACDC,2BAA2B;;AAE5B,WAAsCC,sCAAkB;AAC5DV,aAAS,WADmD;AAE5DC,eAAW,aAFiD;AAG5DC,YAAQ,UAHoD;AAI5DC,cAAU,YAJkD;AAK5DC,aAAS;AALmD,GAAlB,CAAtC;AAAA,MAAEO,mBAAmB,yBAArB;AAAA,MAAuBC,UAAU,gBAAjC;;AAQN,MAAMC,oBAAoB,GAAGC,gBAC3B;AAAM,iCACDH,mBADC,GAEDF,2BAFC;AAGJ,GAJyB,EAK3B,CAACE,mBAAD,EAAsBF,2BAAtB,CAL2B,CAA7B;AAQA,MAAMM,gBAAgB,GAAGD,gBACvB;AAAM,iCACDF,UADC,GAEDN,kBAFC;AAGJ,GAJqB,EAKvB,CAACM,UAAD,EAAaN,kBAAb,CALuB,CAAzB;AAQA,SACEU;AAAKT,aAAS,EAAEA,SAAhB;AAA2BU,SAAK,EAAEJ;AAAlC,KAAsD;AAAAL,eACpDQ;AAAKC,WAAK,EAAEF,gBAAZ;AAA8BR,eAAS,EAAEF;AAAzC,OAAuD,MAAvD,CADoD,EAEnDG,QAFmD;AAAA,GAAtD,GAEW,MAFX,CADF;AAMD,CA1CM;;AAAMU,yBAAcpB,cAAd","names":["ArrowContainer","_a","childRect","popoverRect","position","arrowColor","arrowSize","arrowClassName","externalArrowStyle","className","children","externalArrowContainerStyle","useArrowContainer_1","arrowContainerStyle","arrowStyle","mergedContainerStyle","react_1","mergedArrowStyle","jsx_runtime_1","style","exports"],"sources":["C:\\Users\\ewart\\OneDrive\\Documents\\GitHub\\flightpub\\client\\node_modules\\react-tiny-popover\\src\\ArrowContainer.tsx"],"sourcesContent":["import { useMemo, FC } from 'react';\nimport { ArrowContainerProps } from '.';\nimport { useArrowContainer } from './useArrowContainer';\n\nexport const ArrowContainer: FC<ArrowContainerProps> = ({\n  childRect,\n  popoverRect,\n  position,\n  arrowColor,\n  arrowSize,\n  arrowClassName,\n  arrowStyle: externalArrowStyle,\n  className,\n  children,\n  style: externalArrowContainerStyle,\n}) => {\n  const { arrowContainerStyle, arrowStyle } = useArrowContainer({\n    childRect,\n    popoverRect,\n    position,\n    arrowColor,\n    arrowSize,\n  });\n\n  const mergedContainerStyle = useMemo(\n    () => ({\n      ...arrowContainerStyle,\n      ...externalArrowContainerStyle,\n    }),\n    [arrowContainerStyle, externalArrowContainerStyle],\n  );\n\n  const mergedArrowStyle = useMemo(\n    () => ({\n      ...arrowStyle,\n      ...externalArrowStyle,\n    }),\n    [arrowStyle, externalArrowStyle],\n  );\n\n  return (\n    <div className={className} style={mergedContainerStyle}>\n      <div style={mergedArrowStyle} className={arrowClassName} />\n      {children}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"script"}