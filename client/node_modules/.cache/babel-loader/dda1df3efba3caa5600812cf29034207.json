{"ast":null,"code":"const _excluded = [\"id\", \"autoFocus\", \"textField\", \"dataKey\", \"value\", \"defaultValue\", \"onChange\", \"open\", \"defaultOpen\", \"onToggle\", \"searchTerm\", \"defaultSearchTerm\", \"onSearch\", \"filter\", \"allowCreate\", \"delay\", \"focusFirstItem\", \"className\", \"containerClassName\", \"placeholder\", \"busy\", \"disabled\", \"readOnly\", \"selectIcon\", \"busySpinner\", \"dropUp\", \"tabIndex\", \"popupTransition\", \"name\", \"autoComplete\", \"onSelect\", \"onCreate\", \"onKeyPress\", \"onKeyDown\", \"onClick\", \"inputProps\", \"listProps\", \"popupProps\", \"renderListItem\", \"renderListGroup\", \"optionComponent\", \"renderValue\", \"groupBy\", \"onBlur\", \"onFocus\", \"listComponent\", \"popupComponent\", \"data\", \"messages\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport useTimeout from '@restart/hooks/useTimeout';\nimport AddToListOption, { CREATE_OPTION } from './AddToListOption';\nimport DropdownListInput from './DropdownListInput';\nimport { caretDown } from './Icon';\nimport List from './List';\nimport { FocusListContext, useFocusList } from './FocusListContext';\nimport BasePopup from './Popup';\nimport Widget from './Widget';\nimport WidgetPicker from './WidgetPicker';\nimport { useActiveDescendant } from './A11y';\nimport { useFilteredData, presets } from './Filter';\nimport * as CustomPropTypes from './PropTypes';\nimport canShowCreate from './canShowCreate';\nimport { useAccessors } from './Accessors';\nimport useAutoFocus from './useAutoFocus';\nimport useDropdownToggle from './useDropdownToggle';\nimport useFocusManager from './useFocusManager';\nimport { useLocalizer } from './Localization';\nimport { notify, useFirstFocusedRender, useInstanceId } from './WidgetHelpers';\nimport PickerCaret from './PickerCaret';\nconst propTypes = {\n  value: PropTypes.any,\n\n  /**\n   * @type {function (\n   *  dataItems: ?any,\n   *  metadata: {\n   *    lastValue: ?any,\n   *    searchTerm: ?string\n   *    originalEvent: SyntheticEvent,\n   *  }\n   * ): void}\n   */\n  onChange: PropTypes.func,\n  open: PropTypes.bool,\n  onToggle: PropTypes.func,\n  data: PropTypes.array,\n  dataKey: CustomPropTypes.accessor,\n  textField: CustomPropTypes.accessor,\n  allowCreate: PropTypes.oneOf([true, false, 'onFilter']),\n\n  /**\n   * A React render prop for customizing the rendering of the DropdownList\n   * value\n   */\n  renderValue: PropTypes.func,\n  renderListItem: PropTypes.func,\n  listComponent: CustomPropTypes.elementType,\n  optionComponent: CustomPropTypes.elementType,\n  renderPopup: PropTypes.func,\n  renderListGroup: PropTypes.func,\n  groupBy: CustomPropTypes.accessor,\n\n  /**\n   *\n   * @type {(dataItem: ?any, metadata: { originalEvent: SyntheticEvent }) => void}\n   */\n  onSelect: PropTypes.func,\n  onCreate: PropTypes.func,\n\n  /**\n   * @type function(searchTerm: string, metadata: { action, lastSearchTerm, originalEvent? })\n   */\n  onSearch: PropTypes.func,\n  searchTerm: PropTypes.string,\n  busy: PropTypes.bool,\n\n  /** Specify the element used to render the select (down arrow) icon. */\n  selectIcon: PropTypes.node,\n\n  /** Specify the element used to render the busy indicator */\n  busySpinner: PropTypes.node,\n  placeholder: PropTypes.string,\n  dropUp: PropTypes.bool,\n  popupTransition: CustomPropTypes.elementType,\n  disabled: CustomPropTypes.disabled.acceptsArray,\n  readOnly: CustomPropTypes.disabled,\n\n  /** Adds a css class to the input container element. */\n  containerClassName: PropTypes.string,\n  inputProps: PropTypes.object,\n  listProps: PropTypes.object,\n  messages: PropTypes.shape({\n    open: PropTypes.string,\n    emptyList: CustomPropTypes.message,\n    emptyFilter: CustomPropTypes.message,\n    createOption: CustomPropTypes.message\n  })\n};\n\nfunction useSearchWordBuilder(delay) {\n  const timeout = useTimeout();\n  const wordRef = useRef('');\n\n  function search(character, cb) {\n    let word = (wordRef.current + character).toLowerCase();\n    if (!character) return;\n    wordRef.current = word;\n    timeout.set(() => {\n      wordRef.current = '';\n      cb(word);\n    }, delay);\n  }\n\n  return search;\n}\n/**\n * A `<select>` replacement for single value lists.\n * @public\n */\n\n\nconst DropdownListImpl = /*#__PURE__*/React.forwardRef(function DropdownList(_ref, outerRef) {\n  let {\n    id,\n    autoFocus,\n    textField,\n    dataKey,\n    value,\n    defaultValue,\n    onChange,\n    open,\n    defaultOpen = false,\n    onToggle,\n    searchTerm,\n    defaultSearchTerm = '',\n    onSearch,\n    filter = true,\n    allowCreate = false,\n    delay = 500,\n    focusFirstItem,\n    className,\n    containerClassName,\n    placeholder,\n    busy,\n    disabled,\n    readOnly,\n    selectIcon = caretDown,\n    busySpinner,\n    dropUp,\n    tabIndex,\n    popupTransition,\n    name,\n    autoComplete,\n    onSelect,\n    onCreate,\n    onKeyPress,\n    onKeyDown,\n    onClick,\n    inputProps,\n    listProps,\n    popupProps,\n    renderListItem,\n    renderListGroup,\n    optionComponent,\n    renderValue,\n    groupBy,\n    onBlur,\n    onFocus,\n    listComponent: ListComponent = List,\n    popupComponent: Popup = BasePopup,\n    data: rawData = [],\n    messages: userMessages\n  } = _ref,\n      elementProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [currentValue, handleChange] = useUncontrolledProp(value, defaultValue, onChange);\n  const [currentOpen, handleOpen] = useUncontrolledProp(open, defaultOpen, onToggle);\n  const [currentSearch, handleSearch] = useUncontrolledProp(searchTerm, defaultSearchTerm, onSearch);\n  const ref = useRef(null);\n  const filterRef = useRef(null);\n  const listRef = useRef(null);\n  const inputId = useInstanceId(id, '_input');\n  const listId = useInstanceId(id, '_listbox');\n  const activeId = useInstanceId(id, '_listbox_active_option');\n  const accessors = useAccessors(textField, dataKey);\n  const localizer = useLocalizer(userMessages);\n  useAutoFocus(!!autoFocus, ref);\n  const toggle = useDropdownToggle(currentOpen, handleOpen);\n  const isDisabled = disabled === true; // const disabledItems = toItemArray(disabled)\n\n  const isReadOnly = !!readOnly;\n  const [focusEvents, focused] = useFocusManager(ref, {\n    disabled: isDisabled,\n    onBlur,\n    onFocus\n  }, {\n    didHandle(focused) {\n      if (focused) {\n        if (filter) focus();\n        return;\n      }\n\n      toggle.close();\n      clearSearch();\n    }\n\n  });\n  const data = useFilteredData(rawData, currentOpen ? filter : false, currentSearch, accessors.text);\n  const selectedItem = useMemo(() => data[accessors.indexOf(data, currentValue)], [data, currentValue, accessors]);\n  const list = useFocusList({\n    activeId,\n    scope: ref,\n    focusFirstItem,\n    anchorItem: currentOpen ? selectedItem : undefined\n  });\n  const [autofilling, setAutofilling] = useState(false);\n  const nextSearchChar = useSearchWordBuilder(delay);\n  const focusedItem = list.getFocused();\n  useActiveDescendant(ref, activeId, focusedItem && currentOpen, [focusedItem]);\n  const showCreateOption = canShowCreate(allowCreate, {\n    searchTerm: currentSearch,\n    data,\n    accessors\n  });\n\n  const handleCreate = event => {\n    notify(onCreate, [currentSearch]);\n    clearSearch(event);\n    toggle.close();\n    focus();\n  };\n\n  const handleSelect = (dataItem, originalEvent) => {\n    if (readOnly || isDisabled) return;\n    if (dataItem === undefined) return;\n    originalEvent == null ? void 0 : originalEvent.preventDefault();\n\n    if (dataItem === CREATE_OPTION) {\n      handleCreate(originalEvent);\n      return;\n    }\n\n    notify(onSelect, [dataItem, {\n      originalEvent\n    }]);\n    change(dataItem, originalEvent, true);\n    toggle.close();\n    focus();\n  };\n\n  const handleClick = e => {\n    if (readOnly || isDisabled) return; // prevents double clicks when in a <label>\n\n    e.preventDefault();\n    focus();\n    toggle();\n    notify(onClick, [e]);\n  };\n\n  const handleKeyDown = e => {\n    if (readOnly || isDisabled) return;\n    let {\n      key,\n      altKey,\n      ctrlKey,\n      shiftKey\n    } = e;\n    notify(onKeyDown, [e]);\n\n    let closeWithFocus = () => {\n      clearSearch();\n      toggle.close();\n      if (currentOpen) setTimeout(focus);\n    };\n\n    if (e.defaultPrevented) return;\n\n    if (key === 'End' && currentOpen && !shiftKey) {\n      e.preventDefault();\n      list.focus(list.last());\n    } else if (key === 'Home' && currentOpen && !shiftKey) {\n      e.preventDefault();\n      list.focus(list.first());\n    } else if (key === 'Escape' && (currentOpen || currentSearch)) {\n      e.preventDefault();\n      closeWithFocus();\n    } else if (key === 'Enter' && currentOpen && ctrlKey && showCreateOption) {\n      e.preventDefault();\n      handleCreate(e);\n    } else if ((key === 'Enter' || key === ' ' && !filter) && currentOpen) {\n      e.preventDefault();\n      if (list.hasFocused()) handleSelect(list.getFocused(), e);\n    } else if (key === 'ArrowDown') {\n      e.preventDefault();\n\n      if (!currentOpen) {\n        toggle.open();\n        return;\n      }\n\n      list.focus(list.next());\n    } else if (key === 'ArrowUp') {\n      e.preventDefault();\n      if (altKey) return closeWithFocus();\n      list.focus(list.prev());\n    }\n  };\n\n  const handleKeyPress = e => {\n    if (readOnly || isDisabled) return;\n    notify(onKeyPress, [e]);\n    if (e.defaultPrevented || filter) return;\n    nextSearchChar(String.fromCharCode(e.which), word => {\n      if (!currentOpen) return;\n\n      let isValid = item => presets.startsWith(accessors.text(item).toLowerCase(), word.toLowerCase());\n\n      const [items, focusedItem] = list.get();\n      const len = items.length;\n      const startIdx = items.indexOf(focusedItem) + 1;\n      const offset = startIdx >= len ? 0 : startIdx;\n      let idx = 0;\n      let pointer = offset;\n\n      while (idx < len) {\n        pointer = (idx + offset) % len;\n        let item = items[pointer];\n        if (isValid(list.toDataItem(item))) break;\n        idx++;\n      }\n\n      if (idx === len) return;\n      list.focus(items[pointer]);\n    });\n  };\n\n  const handleInputChange = e => {\n    // hitting space to open\n    if (!currentOpen && !e.target.value.trim()) {\n      e.preventDefault();\n    } else {\n      search(e.target.value, e, 'input');\n    }\n\n    toggle.open();\n  };\n\n  const handleAutofillChange = e => {\n    let filledValue = e.target.value.toLowerCase();\n    if (filledValue === '') return void change(null);\n\n    for (const item of rawData) {\n      if (String(accessors.value(item)).toLowerCase() === filledValue || accessors.text(item).toLowerCase() === filledValue) {\n        change(item, e);\n        break;\n      }\n    }\n  };\n\n  function change(nextValue, originalEvent) {\n    let selected = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (!accessors.matches(nextValue, currentValue)) {\n      notify(handleChange, [nextValue, {\n        originalEvent,\n        source: selected ? 'listbox' : 'input',\n        lastValue: currentValue,\n        searchTerm: currentSearch\n      }]);\n      clearSearch(originalEvent);\n      toggle.close();\n    }\n  }\n\n  function focus() {\n    if (filter) filterRef.current.focus();else ref.current.focus();\n  }\n\n  function clearSearch(originalEvent) {\n    search('', originalEvent, 'clear');\n  }\n\n  function search(nextSearchTerm, originalEvent) {\n    let action = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'input';\n    if (currentSearch !== nextSearchTerm) handleSearch(nextSearchTerm, {\n      action,\n      originalEvent,\n      lastSearchTerm: currentSearch\n    });\n  }\n  /**\n   * Render\n   */\n\n\n  useImperativeHandle(outerRef, () => ({\n    focus\n  }));\n  let valueItem = accessors.findOrSelf(data, currentValue);\n  let shouldRenderPopup = useFirstFocusedRender(focused, currentOpen);\n  const widgetProps = Object.assign({}, elementProps, {\n    role: 'combobox',\n    id: inputId,\n    //tab index when there is no filter input to take focus\n    tabIndex: filter ? -1 : tabIndex || 0,\n    // FIXME: only when item exists\n    'aria-owns': elementProps['aria-owns'] ? `${listId} ${elementProps['aria-owns']}` : listId,\n    'aria-controls': elementProps['aria-controls'] ? `${listId} ${elementProps['aria-controls']}` : listId,\n    'aria-expanded': !!currentOpen,\n    'aria-haspopup': 'listbox',\n    'aria-busy': !!busy,\n    'aria-live': currentOpen ? 'polite' : undefined,\n    'aria-autocomplete': 'list',\n    'aria-disabled': isDisabled,\n    'aria-readonly': isReadOnly\n  });\n  return /*#__PURE__*/React.createElement(FocusListContext.Provider, {\n    value: list.context\n  }, /*#__PURE__*/React.createElement(Widget, _extends({}, widgetProps, {\n    open: !!currentOpen,\n    dropUp: !!dropUp,\n    focused: !!focused,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    autofilling: autofilling\n  }, focusEvents, {\n    onKeyDown: handleKeyDown,\n    onKeyPress: handleKeyPress,\n    className: cn(className, 'rw-dropdown-list'),\n    ref: ref\n  }), /*#__PURE__*/React.createElement(WidgetPicker, {\n    onClick: handleClick,\n    tabIndex: filter ? -1 : 0,\n    className: cn(containerClassName, 'rw-widget-input')\n  }, /*#__PURE__*/React.createElement(DropdownListInput, _extends({}, inputProps, {\n    value: valueItem,\n    dataKeyAccessor: accessors.value,\n    textAccessor: accessors.text,\n    name: name,\n    readOnly: readOnly,\n    disabled: isDisabled,\n    allowSearch: !!filter,\n    searchTerm: currentSearch,\n    ref: filterRef,\n    autoComplete: autoComplete,\n    onSearch: handleInputChange,\n    onAutofill: setAutofilling,\n    onAutofillChange: handleAutofillChange,\n    placeholder: placeholder,\n    renderValue: renderValue\n  })), /*#__PURE__*/React.createElement(PickerCaret, {\n    visible: true,\n    busy: busy,\n    icon: selectIcon,\n    spinner: busySpinner\n  })), shouldRenderPopup && /*#__PURE__*/React.createElement(Popup, _extends({}, popupProps, {\n    dropUp: dropUp,\n    open: currentOpen,\n    transition: popupTransition,\n    onEntered: focus,\n    onEntering: () => listRef.current.scrollIntoView()\n  }), /*#__PURE__*/React.createElement(ListComponent, _extends({}, listProps, {\n    id: listId,\n    data: data,\n    tabIndex: -1,\n    disabled: disabled,\n    groupBy: groupBy,\n    searchTerm: currentSearch,\n    accessors: accessors,\n    renderItem: renderListItem,\n    renderGroup: renderListGroup,\n    optionComponent: optionComponent,\n    value: selectedItem,\n    onChange: (d, meta) => handleSelect(d, meta.originalEvent),\n    \"aria-live\": currentOpen ? 'polite' : undefined,\n    \"aria-labelledby\": inputId,\n    \"aria-hidden\": !currentOpen,\n    ref: listRef,\n    messages: {\n      emptyList: rawData.length ? localizer.messages.emptyFilter : localizer.messages.emptyList\n    }\n  })), showCreateOption && /*#__PURE__*/React.createElement(AddToListOption, {\n    onSelect: handleCreate\n  }, localizer.messages.createOption(currentValue, currentSearch || '')))));\n});\nDropdownListImpl.displayName = 'DropdownList';\nDropdownListImpl.propTypes = propTypes;\nexport default DropdownListImpl;","map":{"version":3,"sources":["C:/Users/ewart/OneDrive/Documents/GitHub/flightpub/client/node_modules/react-widgets/esm/DropdownList.js"],"names":["_excluded","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","cn","PropTypes","React","useImperativeHandle","useMemo","useRef","useState","useUncontrolledProp","useTimeout","AddToListOption","CREATE_OPTION","DropdownListInput","caretDown","List","FocusListContext","useFocusList","BasePopup","Widget","WidgetPicker","useActiveDescendant","useFilteredData","presets","CustomPropTypes","canShowCreate","useAccessors","useAutoFocus","useDropdownToggle","useFocusManager","useLocalizer","notify","useFirstFocusedRender","useInstanceId","PickerCaret","propTypes","value","any","onChange","func","open","bool","onToggle","data","array","dataKey","accessor","textField","allowCreate","oneOf","renderValue","renderListItem","listComponent","elementType","optionComponent","renderPopup","renderListGroup","groupBy","onSelect","onCreate","onSearch","searchTerm","string","busy","selectIcon","node","busySpinner","placeholder","dropUp","popupTransition","disabled","acceptsArray","readOnly","containerClassName","inputProps","object","listProps","messages","shape","emptyList","message","emptyFilter","createOption","useSearchWordBuilder","delay","timeout","wordRef","search","character","cb","word","current","toLowerCase","set","DropdownListImpl","forwardRef","DropdownList","_ref","outerRef","id","autoFocus","defaultValue","defaultOpen","defaultSearchTerm","filter","focusFirstItem","className","tabIndex","name","autoComplete","onKeyPress","onKeyDown","onClick","popupProps","onBlur","onFocus","ListComponent","popupComponent","Popup","rawData","userMessages","elementProps","currentValue","handleChange","currentOpen","handleOpen","currentSearch","handleSearch","ref","filterRef","listRef","inputId","listId","activeId","accessors","localizer","toggle","isDisabled","isReadOnly","focusEvents","focused","didHandle","focus","close","clearSearch","text","selectedItem","list","scope","anchorItem","undefined","autofilling","setAutofilling","nextSearchChar","focusedItem","getFocused","showCreateOption","handleCreate","event","handleSelect","dataItem","originalEvent","preventDefault","change","handleClick","e","handleKeyDown","altKey","ctrlKey","shiftKey","closeWithFocus","setTimeout","defaultPrevented","last","first","hasFocused","next","prev","handleKeyPress","String","fromCharCode","which","isValid","item","startsWith","items","get","len","startIdx","offset","idx","pointer","toDataItem","handleInputChange","trim","handleAutofillChange","filledValue","nextValue","selected","matches","lastValue","nextSearchTerm","action","lastSearchTerm","valueItem","findOrSelf","shouldRenderPopup","widgetProps","role","createElement","Provider","context","dataKeyAccessor","textAccessor","allowSearch","onAutofill","onAutofillChange","visible","icon","spinner","transition","onEntered","onEntering","scrollIntoView","renderItem","renderGroup","d","meta","displayName"],"mappings":"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","sourcesContent":["const _excluded = [\"id\", \"autoFocus\", \"textField\", \"dataKey\", \"value\", \"defaultValue\", \"onChange\", \"open\", \"defaultOpen\", \"onToggle\", \"searchTerm\", \"defaultSearchTerm\", \"onSearch\", \"filter\", \"allowCreate\", \"delay\", \"focusFirstItem\", \"className\", \"containerClassName\", \"placeholder\", \"busy\", \"disabled\", \"readOnly\", \"selectIcon\", \"busySpinner\", \"dropUp\", \"tabIndex\", \"popupTransition\", \"name\", \"autoComplete\", \"onSelect\", \"onCreate\", \"onKeyPress\", \"onKeyDown\", \"onClick\", \"inputProps\", \"listProps\", \"popupProps\", \"renderListItem\", \"renderListGroup\", \"optionComponent\", \"renderValue\", \"groupBy\", \"onBlur\", \"onFocus\", \"listComponent\", \"popupComponent\", \"data\", \"messages\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport useTimeout from '@restart/hooks/useTimeout';\nimport AddToListOption, { CREATE_OPTION } from './AddToListOption';\nimport DropdownListInput from './DropdownListInput';\nimport { caretDown } from './Icon';\nimport List from './List';\nimport { FocusListContext, useFocusList } from './FocusListContext';\nimport BasePopup from './Popup';\nimport Widget from './Widget';\nimport WidgetPicker from './WidgetPicker';\nimport { useActiveDescendant } from './A11y';\nimport { useFilteredData, presets } from './Filter';\nimport * as CustomPropTypes from './PropTypes';\nimport canShowCreate from './canShowCreate';\nimport { useAccessors } from './Accessors';\nimport useAutoFocus from './useAutoFocus';\nimport useDropdownToggle from './useDropdownToggle';\nimport useFocusManager from './useFocusManager';\nimport { useLocalizer } from './Localization';\nimport { notify, useFirstFocusedRender, useInstanceId } from './WidgetHelpers';\nimport PickerCaret from './PickerCaret';\nconst propTypes = {\n  value: PropTypes.any,\n\n  /**\n   * @type {function (\n   *  dataItems: ?any,\n   *  metadata: {\n   *    lastValue: ?any,\n   *    searchTerm: ?string\n   *    originalEvent: SyntheticEvent,\n   *  }\n   * ): void}\n   */\n  onChange: PropTypes.func,\n  open: PropTypes.bool,\n  onToggle: PropTypes.func,\n  data: PropTypes.array,\n  dataKey: CustomPropTypes.accessor,\n  textField: CustomPropTypes.accessor,\n  allowCreate: PropTypes.oneOf([true, false, 'onFilter']),\n\n  /**\n   * A React render prop for customizing the rendering of the DropdownList\n   * value\n   */\n  renderValue: PropTypes.func,\n  renderListItem: PropTypes.func,\n  listComponent: CustomPropTypes.elementType,\n  optionComponent: CustomPropTypes.elementType,\n  renderPopup: PropTypes.func,\n  renderListGroup: PropTypes.func,\n  groupBy: CustomPropTypes.accessor,\n\n  /**\n   *\n   * @type {(dataItem: ?any, metadata: { originalEvent: SyntheticEvent }) => void}\n   */\n  onSelect: PropTypes.func,\n  onCreate: PropTypes.func,\n\n  /**\n   * @type function(searchTerm: string, metadata: { action, lastSearchTerm, originalEvent? })\n   */\n  onSearch: PropTypes.func,\n  searchTerm: PropTypes.string,\n  busy: PropTypes.bool,\n\n  /** Specify the element used to render the select (down arrow) icon. */\n  selectIcon: PropTypes.node,\n\n  /** Specify the element used to render the busy indicator */\n  busySpinner: PropTypes.node,\n  placeholder: PropTypes.string,\n  dropUp: PropTypes.bool,\n  popupTransition: CustomPropTypes.elementType,\n  disabled: CustomPropTypes.disabled.acceptsArray,\n  readOnly: CustomPropTypes.disabled,\n\n  /** Adds a css class to the input container element. */\n  containerClassName: PropTypes.string,\n  inputProps: PropTypes.object,\n  listProps: PropTypes.object,\n  messages: PropTypes.shape({\n    open: PropTypes.string,\n    emptyList: CustomPropTypes.message,\n    emptyFilter: CustomPropTypes.message,\n    createOption: CustomPropTypes.message\n  })\n};\n\nfunction useSearchWordBuilder(delay) {\n  const timeout = useTimeout();\n  const wordRef = useRef('');\n\n  function search(character, cb) {\n    let word = (wordRef.current + character).toLowerCase();\n    if (!character) return;\n    wordRef.current = word;\n    timeout.set(() => {\n      wordRef.current = '';\n      cb(word);\n    }, delay);\n  }\n\n  return search;\n}\n\n/**\n * A `<select>` replacement for single value lists.\n * @public\n */\nconst DropdownListImpl = /*#__PURE__*/React.forwardRef(function DropdownList(_ref, outerRef) {\n  let {\n    id,\n    autoFocus,\n    textField,\n    dataKey,\n    value,\n    defaultValue,\n    onChange,\n    open,\n    defaultOpen = false,\n    onToggle,\n    searchTerm,\n    defaultSearchTerm = '',\n    onSearch,\n    filter = true,\n    allowCreate = false,\n    delay = 500,\n    focusFirstItem,\n    className,\n    containerClassName,\n    placeholder,\n    busy,\n    disabled,\n    readOnly,\n    selectIcon = caretDown,\n    busySpinner,\n    dropUp,\n    tabIndex,\n    popupTransition,\n    name,\n    autoComplete,\n    onSelect,\n    onCreate,\n    onKeyPress,\n    onKeyDown,\n    onClick,\n    inputProps,\n    listProps,\n    popupProps,\n    renderListItem,\n    renderListGroup,\n    optionComponent,\n    renderValue,\n    groupBy,\n    onBlur,\n    onFocus,\n    listComponent: ListComponent = List,\n    popupComponent: Popup = BasePopup,\n    data: rawData = [],\n    messages: userMessages\n  } = _ref,\n      elementProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [currentValue, handleChange] = useUncontrolledProp(value, defaultValue, onChange);\n  const [currentOpen, handleOpen] = useUncontrolledProp(open, defaultOpen, onToggle);\n  const [currentSearch, handleSearch] = useUncontrolledProp(searchTerm, defaultSearchTerm, onSearch);\n  const ref = useRef(null);\n  const filterRef = useRef(null);\n  const listRef = useRef(null);\n  const inputId = useInstanceId(id, '_input');\n  const listId = useInstanceId(id, '_listbox');\n  const activeId = useInstanceId(id, '_listbox_active_option');\n  const accessors = useAccessors(textField, dataKey);\n  const localizer = useLocalizer(userMessages);\n  useAutoFocus(!!autoFocus, ref);\n  const toggle = useDropdownToggle(currentOpen, handleOpen);\n  const isDisabled = disabled === true; // const disabledItems = toItemArray(disabled)\n\n  const isReadOnly = !!readOnly;\n  const [focusEvents, focused] = useFocusManager(ref, {\n    disabled: isDisabled,\n    onBlur,\n    onFocus\n  }, {\n    didHandle(focused) {\n      if (focused) {\n        if (filter) focus();\n        return;\n      }\n\n      toggle.close();\n      clearSearch();\n    }\n\n  });\n  const data = useFilteredData(rawData, currentOpen ? filter : false, currentSearch, accessors.text);\n  const selectedItem = useMemo(() => data[accessors.indexOf(data, currentValue)], [data, currentValue, accessors]);\n  const list = useFocusList({\n    activeId,\n    scope: ref,\n    focusFirstItem,\n    anchorItem: currentOpen ? selectedItem : undefined\n  });\n  const [autofilling, setAutofilling] = useState(false);\n  const nextSearchChar = useSearchWordBuilder(delay);\n  const focusedItem = list.getFocused();\n  useActiveDescendant(ref, activeId, focusedItem && currentOpen, [focusedItem]);\n  const showCreateOption = canShowCreate(allowCreate, {\n    searchTerm: currentSearch,\n    data,\n    accessors\n  });\n\n  const handleCreate = event => {\n    notify(onCreate, [currentSearch]);\n    clearSearch(event);\n    toggle.close();\n    focus();\n  };\n\n  const handleSelect = (dataItem, originalEvent) => {\n    if (readOnly || isDisabled) return;\n    if (dataItem === undefined) return;\n    originalEvent == null ? void 0 : originalEvent.preventDefault();\n\n    if (dataItem === CREATE_OPTION) {\n      handleCreate(originalEvent);\n      return;\n    }\n\n    notify(onSelect, [dataItem, {\n      originalEvent\n    }]);\n    change(dataItem, originalEvent, true);\n    toggle.close();\n    focus();\n  };\n\n  const handleClick = e => {\n    if (readOnly || isDisabled) return; // prevents double clicks when in a <label>\n\n    e.preventDefault();\n    focus();\n    toggle();\n    notify(onClick, [e]);\n  };\n\n  const handleKeyDown = e => {\n    if (readOnly || isDisabled) return;\n    let {\n      key,\n      altKey,\n      ctrlKey,\n      shiftKey\n    } = e;\n    notify(onKeyDown, [e]);\n\n    let closeWithFocus = () => {\n      clearSearch();\n      toggle.close();\n      if (currentOpen) setTimeout(focus);\n    };\n\n    if (e.defaultPrevented) return;\n\n    if (key === 'End' && currentOpen && !shiftKey) {\n      e.preventDefault();\n      list.focus(list.last());\n    } else if (key === 'Home' && currentOpen && !shiftKey) {\n      e.preventDefault();\n      list.focus(list.first());\n    } else if (key === 'Escape' && (currentOpen || currentSearch)) {\n      e.preventDefault();\n      closeWithFocus();\n    } else if (key === 'Enter' && currentOpen && ctrlKey && showCreateOption) {\n      e.preventDefault();\n      handleCreate(e);\n    } else if ((key === 'Enter' || key === ' ' && !filter) && currentOpen) {\n      e.preventDefault();\n      if (list.hasFocused()) handleSelect(list.getFocused(), e);\n    } else if (key === 'ArrowDown') {\n      e.preventDefault();\n\n      if (!currentOpen) {\n        toggle.open();\n        return;\n      }\n\n      list.focus(list.next());\n    } else if (key === 'ArrowUp') {\n      e.preventDefault();\n      if (altKey) return closeWithFocus();\n      list.focus(list.prev());\n    }\n  };\n\n  const handleKeyPress = e => {\n    if (readOnly || isDisabled) return;\n    notify(onKeyPress, [e]);\n    if (e.defaultPrevented || filter) return;\n    nextSearchChar(String.fromCharCode(e.which), word => {\n      if (!currentOpen) return;\n\n      let isValid = item => presets.startsWith(accessors.text(item).toLowerCase(), word.toLowerCase());\n\n      const [items, focusedItem] = list.get();\n      const len = items.length;\n      const startIdx = items.indexOf(focusedItem) + 1;\n      const offset = startIdx >= len ? 0 : startIdx;\n      let idx = 0;\n      let pointer = offset;\n\n      while (idx < len) {\n        pointer = (idx + offset) % len;\n        let item = items[pointer];\n        if (isValid(list.toDataItem(item))) break;\n        idx++;\n      }\n\n      if (idx === len) return;\n      list.focus(items[pointer]);\n    });\n  };\n\n  const handleInputChange = e => {\n    // hitting space to open\n    if (!currentOpen && !e.target.value.trim()) {\n      e.preventDefault();\n    } else {\n      search(e.target.value, e, 'input');\n    }\n\n    toggle.open();\n  };\n\n  const handleAutofillChange = e => {\n    let filledValue = e.target.value.toLowerCase();\n    if (filledValue === '') return void change(null);\n\n    for (const item of rawData) {\n      if (String(accessors.value(item)).toLowerCase() === filledValue || accessors.text(item).toLowerCase() === filledValue) {\n        change(item, e);\n        break;\n      }\n    }\n  };\n\n  function change(nextValue, originalEvent, selected = false) {\n    if (!accessors.matches(nextValue, currentValue)) {\n      notify(handleChange, [nextValue, {\n        originalEvent,\n        source: selected ? 'listbox' : 'input',\n        lastValue: currentValue,\n        searchTerm: currentSearch\n      }]);\n      clearSearch(originalEvent);\n      toggle.close();\n    }\n  }\n\n  function focus() {\n    if (filter) filterRef.current.focus();else ref.current.focus();\n  }\n\n  function clearSearch(originalEvent) {\n    search('', originalEvent, 'clear');\n  }\n\n  function search(nextSearchTerm, originalEvent, action = 'input') {\n    if (currentSearch !== nextSearchTerm) handleSearch(nextSearchTerm, {\n      action,\n      originalEvent,\n      lastSearchTerm: currentSearch\n    });\n  }\n  /**\n   * Render\n   */\n\n\n  useImperativeHandle(outerRef, () => ({\n    focus\n  }));\n  let valueItem = accessors.findOrSelf(data, currentValue);\n  let shouldRenderPopup = useFirstFocusedRender(focused, currentOpen);\n  const widgetProps = Object.assign({}, elementProps, {\n    role: 'combobox',\n    id: inputId,\n    //tab index when there is no filter input to take focus\n    tabIndex: filter ? -1 : tabIndex || 0,\n    // FIXME: only when item exists\n    'aria-owns': elementProps['aria-owns'] ? `${listId} ${elementProps['aria-owns']}` : listId,\n    'aria-controls': elementProps['aria-controls'] ? `${listId} ${elementProps['aria-controls']}` : listId,\n    'aria-expanded': !!currentOpen,\n    'aria-haspopup': 'listbox',\n    'aria-busy': !!busy,\n    'aria-live': currentOpen ? 'polite' : undefined,\n    'aria-autocomplete': 'list',\n    'aria-disabled': isDisabled,\n    'aria-readonly': isReadOnly\n  });\n  return /*#__PURE__*/React.createElement(FocusListContext.Provider, {\n    value: list.context\n  }, /*#__PURE__*/React.createElement(Widget, _extends({}, widgetProps, {\n    open: !!currentOpen,\n    dropUp: !!dropUp,\n    focused: !!focused,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    autofilling: autofilling\n  }, focusEvents, {\n    onKeyDown: handleKeyDown,\n    onKeyPress: handleKeyPress,\n    className: cn(className, 'rw-dropdown-list'),\n    ref: ref\n  }), /*#__PURE__*/React.createElement(WidgetPicker, {\n    onClick: handleClick,\n    tabIndex: filter ? -1 : 0,\n    className: cn(containerClassName, 'rw-widget-input')\n  }, /*#__PURE__*/React.createElement(DropdownListInput, _extends({}, inputProps, {\n    value: valueItem,\n    dataKeyAccessor: accessors.value,\n    textAccessor: accessors.text,\n    name: name,\n    readOnly: readOnly,\n    disabled: isDisabled,\n    allowSearch: !!filter,\n    searchTerm: currentSearch,\n    ref: filterRef,\n    autoComplete: autoComplete,\n    onSearch: handleInputChange,\n    onAutofill: setAutofilling,\n    onAutofillChange: handleAutofillChange,\n    placeholder: placeholder,\n    renderValue: renderValue\n  })), /*#__PURE__*/React.createElement(PickerCaret, {\n    visible: true,\n    busy: busy,\n    icon: selectIcon,\n    spinner: busySpinner\n  })), shouldRenderPopup && /*#__PURE__*/React.createElement(Popup, _extends({}, popupProps, {\n    dropUp: dropUp,\n    open: currentOpen,\n    transition: popupTransition,\n    onEntered: focus,\n    onEntering: () => listRef.current.scrollIntoView()\n  }), /*#__PURE__*/React.createElement(ListComponent, _extends({}, listProps, {\n    id: listId,\n    data: data,\n    tabIndex: -1,\n    disabled: disabled,\n    groupBy: groupBy,\n    searchTerm: currentSearch,\n    accessors: accessors,\n    renderItem: renderListItem,\n    renderGroup: renderListGroup,\n    optionComponent: optionComponent,\n    value: selectedItem,\n    onChange: (d, meta) => handleSelect(d, meta.originalEvent),\n    \"aria-live\": currentOpen ? 'polite' : undefined,\n    \"aria-labelledby\": inputId,\n    \"aria-hidden\": !currentOpen,\n    ref: listRef,\n    messages: {\n      emptyList: rawData.length ? localizer.messages.emptyFilter : localizer.messages.emptyList\n    }\n  })), showCreateOption && /*#__PURE__*/React.createElement(AddToListOption, {\n    onSelect: handleCreate\n  }, localizer.messages.createOption(currentValue, currentSearch || '')))));\n});\nDropdownListImpl.displayName = 'DropdownList';\nDropdownListImpl.propTypes = propTypes;\nexport default DropdownListImpl;"]},"metadata":{},"sourceType":"module"}