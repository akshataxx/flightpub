{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ewart\\\\OneDrive\\\\Documents\\\\GitHub\\\\flightpub\\\\client\\\\src\\\\frontEnd\\\\components\\\\flights\\\\FlightList.js\",\n    _s = $RefreshSig$();\n\nimport FlightItem from './FlightItem';\nimport classes from './FlightList.module.css';\nimport Card from \"../ui/Card\";\nimport { useState } from \"react\";\nimport { useContext } from 'react';\nimport FlightPubContext from \"../../store/FlightPubContext\";\nimport DropdownList from \"react-widgets/DropdownList\";\nimport { Button } from \"@mui/material\";\nimport MultiFlightItem from \"./MultiFlightItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FlightList(props) {\n  _s();\n\n  const context = useContext(FlightPubContext);\n  const [flightList, setFlightList] = useState([]);\n  const [returnFlightList, setReturnFlightList] = useState([]);\n  const [flightSelected, setFlightSelected] = useState(false);\n  const [selectedFlight, setSelectedFlight] = useState([]);\n  const [returnFlightSelected, setReturnFlightSelected] = useState(false);\n  const [selectedReturnFlight, setSelectedReturnFlight] = useState([]);\n  props.flights.map(el => {\n    flightList.push(el);\n    returnFlightList.push(el);\n  });\n\n  if (flightSelected) {\n    console.log(\"wow ur trip to is selected\");\n  }\n\n  if (returnFlightSelected) {\n    console.log(\"wow way back selected\");\n  } //struct to store flights in a reverse linkedList\n  //pattern for the multi-search algorithm\n\n\n  function makeFlightStruct(e) {\n    var flightRefs = e.split(' ');\n\n    function constructor() {\n      this[flightRefs[0]] = arguments[0];\n      this[flightRefs[1]] = arguments[1];\n    }\n\n    return constructor;\n  }\n\n  function multiSearch() {\n    //todo\n    //create struct where each el has a ref to it's prev flightPoint except for the start of each search which uses null\n    //replace iterating through map to find matches with, iterating through returned database results\n    //\n    //flightList.length = 0;\n    //returnFlightList.length = 0;\n    var FlightPoint = makeFlightStruct(\"prev curr\");\n    var flightPoints = [];\n    flightList.length = 0;\n    returnFlightList.length = 0;\n    var startIndex = 0;\n    props.flights.map(el => {\n      flightPoints.length = 0; //find next start point\n\n      if (el.departure.toLowerCase() == props.searchQuery.departureLocation.toLowerCase()) {\n        var validTime = false;\n\n        if (!props.searchQuery.flexibleDeparture && el.departureDate.getFullYear() == props.searchQuery.soonestDepartureDate.getFullYear() && el.departureDate.getMonth() == props.searchQuery.soonestDepartureDate.getMonth() && el.departureDate.getDate() == props.searchQuery.soonestDepartureDate.getDate() || props.searchQuery.flexibleDeparture && el.departureDate.getFullYear() >= props.searchQuery.soonestDepartureDate.getFullYear() && el.departureDate.getFullYear() <= props.searchQuery.latestDepartureDate.getFullYear() && el.departureDate.getMonth() >= props.searchQuery.soonestDepartureDate.getMonth() && el.departureDate.getMonth() <= props.searchQuery.latestDepartureDate.getMonth() && el.departureDate.getDate() >= props.searchQuery.soonestDepartureDate.getDate() && el.departureDate.getDate() <= props.searchQuery.latestDepartureDate.getDate()) {\n          validTime = true;\n        }\n\n        if (validTime) {\n          if (el.destination.toLowerCase() == props.searchQuery.destinationLocation.toLowerCase()) {\n            //add to flight list\n            flightList.push([el]); //don't include other results as they are meaningless and create a loop\n          } else {\n            var tempP = new FlightPoint(null, el);\n            flightPoints.push(tempP); //search for flights from this node\n\n            props.flights.map(el2 => {\n              if (el2.departure.toLowerCase() == flightPoints[startIndex].curr.destination.toLowerCase()) {\n                //check flight occurs after last flight\n                validTime = false;\n                var dayAfter = new Date();\n                dayAfter.setDate(el.departureDate.getDate() + 1);\n\n                if (el.departureDate.getFullYear() == el2.departureDate.getFullYear() && el.departureDate.getMonth() == el2.departureDate.getMonth() && el.departureDate.getDate() == el2.departureDate.getDate() || dayAfter.getFullYear() == el2.departureDate.getFullYear() && dayAfter.getMonth() == el2.departureDate.getMonth() && dayAfter.getDate() == el2.departureDate.getDate()) {\n                  validTime = true;\n                }\n\n                if (validTime) {\n                  if (el2.destination.toLowerCase() == props.searchQuery.destinationLocation.toLowerCase()) {\n                    flightList.push([el, el2]); //add to search results\n                    //don't search further due to loop\n                  } else {\n                    flightPoints.push(new FlightPoint(flightPoints[startIndex], el2));\n                  }\n                }\n              }\n            });\n            startIndex++;\n            var endIndex = flightPoints.length;\n\n            for (var i = startIndex; i < endIndex; i++) {\n              props.flights.map(el2 => {\n                if (el2.departure.toLowerCase() == flightPoints[i].curr.destination.toLowerCase() && el2.destination.toLowerCase() == props.searchQuery.destinationLocation.toLowerCase()) {\n                  //check if flight occurs after last flight\n                  validTime = false;\n                  var dayAfter = new Date();\n                  dayAfter.setDate(flightPoints[i].curr.departureDate.getDate() + 1);\n\n                  if (flightPoints[i].curr.departureDate.getFullYear() == el2.departureDate.getFullYear() && flightPoints[i].curr.departureDate.getMonth() == el2.departureDate.getMonth() && flightPoints[i].curr.departureDate.getDate() == el2.departureDate.getDate() || dayAfter.getFullYear() == el2.departureDate.getFullYear() && dayAfter.getMonth() == el2.departureDate.getMonth() && dayAfter.getDate() == el2.departureDate.getDate()) {\n                    validTime = true;\n                  }\n\n                  if (validTime) {\n                    //add flight to list\n                    flightList.push([el, flightPoints[i].curr, el2]);\n                    flightPoints.push(new FlightPoint(flightPoints[i], el2));\n                  }\n                }\n              });\n            }\n          }\n        }\n      }\n    }); //return trip details\n\n    /*if(!props.searchQuery.oneWayTrip) {\r\n        startIndex = 0;\r\n          props.flights.map((el) => {\r\n              flightPoints.length = 0;\r\n            //find next start point\r\n            if (el.departure.toLowerCase() == props.searchQuery.destinationLocation.toLowerCase()) {\r\n                var validTime = false;\r\n                if (!props.searchQuery.flexibleReturn\r\n                    && el.departureDate.getFullYear() == props.searchQuery.soonestReturnDate.getFullYear()\r\n                    && el.departureDate.getMonth() == props.searchQuery.soonestReturnDate.getMonth()\r\n                    && el.departureDate.getDate() == props.searchQuery.soonestReturnDate.getDate()\r\n                    || props.searchQuery.flexibleReturn\r\n                    && el.departureDate.getFullYear() >= props.searchQuery.soonestReturnDate.getFullYear()\r\n                    && el.departureDate.getFullYear() <= props.searchQuery.latestReturnDate.getFullYear()\r\n                    && el.departureDate.getMonth() >= props.searchQuery.soonestReturnDate.getMonth()\r\n                    && el.departureDate.getMonth() <= props.searchQuery.latestReturnDate.getMonth()\r\n                    && el.departureDate.getDate() >= props.searchQuery.soonestReturnDate.getDate()\r\n                    && el.departureDate.getDate() <= props.searchQuery.latestReturnDate.getDate()) {\r\n                    validTime = true;\r\n                }\r\n                  if (validTime) {\r\n                    if (el.destination.toLowerCase() == props.searchQuery.departureLocation.toLowerCase()) {\r\n                        //add to flight list\r\n                        returnFlightList.push([el])\r\n                        //don't include other results as they are meaningless and create a loop\r\n                    } else {\r\n                        flightPoints.push(new FlightPoint(null, el));\r\n                            //search for flights from this node\r\n                        props.flights.map((el2) => {\r\n                            if (el2.departure.toLowerCase() == flightPoints[startIndex].curr.destination.toLowerCase()) {\r\n                                //check flight occurs after last flight\r\n                                validTime = false;\r\n                                var dayAfter = new Date();\r\n                                dayAfter.setDate(el.departureDate.getDate() + 1);\r\n                                  if (el.departureDate.getFullYear() == el2.departureDate.getFullYear()\r\n                                    && el.departureDate.getMonth() == el2.departureDate.getMonth()\r\n                                    && el.departureDate.getDate() == el2.departureDate.getDate()\r\n                                    ||\r\n                                    dayAfter.getFullYear() == el2.departureDate.getFullYear()\r\n                                    && dayAfter.getMonth() == el2.departureDate.getMonth()\r\n                                    && dayAfter.getDate() == el2.departureDate.getDate()) {\r\n                                    validTime = true;\r\n                                }\r\n                                  if (validTime) {\r\n                                    if (el2.destination.toLowerCase() == props.searchQuery.departureLocation.toLowerCase()) {\r\n                                        returnFlightList.push([el, el2])\r\n                                        //add to search results\r\n                                        //don't search further due to loop\r\n                                    } else {\r\n                                        flightPoints.push(new FlightPoint(flightPoints[startIndex], el2));\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                          startIndex++;\r\n                        var endIndex = flightPoints.length;\r\n                        for (var i = startIndex; i < endIndex; i++) {\r\n                            props.flights.map((el2) => {\r\n                                  if (el2.departure.toLowerCase() == flightPoints[i].curr.destination.toLowerCase() &&\r\n                                    el2.destination.toLowerCase() == props.searchQuery.departureLocation.toLowerCase()) {\r\n                                    //check if flight occurs after last flight\r\n                                    validTime = false;\r\n                                    var dayAfter = new Date();\r\n                                    dayAfter.setDate(flightPoints[i].curr.departureDate.getDate() + 1);\r\n                                      if (flightPoints[i].curr.departureDate.getFullYear() == el2.departureDate.getFullYear()\r\n                                        && flightPoints[i].curr.departureDate.getMonth() == el2.departureDate.getMonth()\r\n                                        && flightPoints[i].curr.departureDate.getDate() == el2.departureDate.getDate()\r\n                                        ||\r\n                                        dayAfter.getFullYear() == el2.departureDate.getFullYear()\r\n                                        && dayAfter.getMonth() == el2.departureDate.getMonth()\r\n                                        && dayAfter.getDate() == el2.departureDate.getDate()) {\r\n                                        validTime = true;\r\n                                    }\r\n                                      if (validTime) {\r\n                                        //add flight to list\r\n                                        returnFlightList.push([el, flightPoints[i].curr, el2]);\r\n                                        flightPoints.push(new FlightPoint(flightPoints[i], el2));\r\n                                    }\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                }\r\n            })\r\n    }\r\n       */\n  }\n\n  function sort(e) {\n    console.log(e);\n\n    if (e == \"soonest\") {\n      for (let i = 0; i < flightList.length; i++) {\n        for (let j = 0; j < flightList.length - i - 1; j++) {\n          if (flightList[j + 1][0].departureDate < flightList[j][0].departureDate) {\n            [flightList[j + 1], flightList[j]] = [flightList[j], flightList[j + 1]];\n          }\n        }\n      }\n\n      for (let i = 0; i < returnFlightList.length; i++) {\n        for (let j = 0; j < returnFlightList.length - i - 1; j++) {\n          if (returnFlightList[j + 1][0].departureDate < returnFlightList[j][0].departureDate) {\n            [returnFlightList[j + 1], returnFlightList[j]] = [returnFlightList[j], returnFlightList[j + 1]];\n          }\n        }\n      }\n    }\n  }\n\n  function Return() {\n    if (props.searchQuery.oneWayTrip) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Return Trip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: classes.tableList,\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Flight\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Departure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Destination\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Dep\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Arr\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Favorite\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Sponsored\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: returnFlightList.map(flightDetails => /*#__PURE__*/_jsxDEV(MultiFlightItem, {\n            flightPackage: flightDetails,\n            selectedFlights: selectedReturnFlight,\n            return: true,\n            selectFlight: res => res == true ? setReturnFlightSelected(true) : setFlightSelected(true),\n            selFlight: res => setSelectedReturnFlight(res)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 23\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 11\n    }, this);\n  }\n\n  function bookingFlightHandler() {\n    const flightArr = [];\n\n    if (props.searchQuery.oneWayTrip) {\n      if (flightSelected) {\n        selectedFlight.map(flight => {\n          //console.log(flight);\n          flightArr.push(flight);\n        }); //move onto next phase\n\n        context.setBookingsSelected(true); //console.log(context.bookingsSelected);\n\n        props.exportFlights(flightArr);\n        return;\n      }\n    } else {\n      if (flightSelected && returnFlightSelected) {\n        selectedFlight.map(flight => {\n          flightArr.push(flight);\n        });\n        selectedReturnFlight.map(flight => {\n          flightArr.push(flight);\n        });\n        context.setBookingsSelected(true); //console.log(context.bookingsSelected);\n\n        props.exportFlights(flightArr);\n        return;\n      }\n    } //some error has occured\n\n\n    console.log(\"you have not selected a return or departure flights\");\n    return;\n  }\n\n  function swap(arr, i, j) {\n    [arr[j], arr[i]] = [arr[i], arr[j]];\n  }\n\n  function partition(arr, lowBound, highBound) {\n    var highCount = 0;\n\n    for (let h = 0; h < arr[highBound].length; h++) {\n      if (arr[highBound][h].sponsored == true) {\n        highCount += 1;\n      }\n    }\n\n    let piv = highCount;\n    let i = lowBound - 1;\n\n    for (let j = lowBound; j <= highBound - 1; j++) {\n      var jCount = 0;\n\n      for (let h = 0; h < arr[j].length; h++) {\n        if (arr[j][h].sponsored == true) {\n          jCount += 1;\n        }\n      }\n\n      if (jCount > piv) {\n        i++;\n        swap(arr, i, j);\n      }\n    }\n\n    swap(arr, i + 1, highBound);\n    return i + 1;\n  }\n\n  function quickSort(arr, low, high) {\n    if (low < high) {\n      let partIndex = partition(arr, low, high);\n      quickSort(arr, low, partIndex - 1);\n      quickSort(arr, partIndex + 1, high);\n    }\n  }\n\n  function sponsoredSort(arr) {\n    quickSort(arr, 0, arr.length - 1);\n    /*for(let i = 0; i < arr.length; i++)\r\n    {\r\n        for(let j = 0; j < arr.length - i - 1; j++)\r\n        {\r\n            var nextSponsoredCount = 0;\r\n            var thisSponsoredCount = 0;\r\n                for(let h = 0; h < arr[j + i].length; h++)\r\n            {\r\n                if(arr[j + 1][h].sponsored == true)\r\n                {\r\n                    nextSponsoredCount += 1;\r\n                }\r\n            }\r\n              for(let h = 0; h < arr[j].length; h++)\r\n            {\r\n                if(arr[j][h].sponsored == true)\r\n                {\r\n                    thisSponsoredCount += 1;\r\n                }\r\n            }\r\n              if(nextSponsoredCount > thisSponsoredCount)\r\n            {\r\n                [arr[j+1], arr[j]] = [arr[j], arr[j+1]];\r\n            }\r\n        }\r\n    }*/\n  }\n\n  multiSearch(); //searchFlightList();\n  //sort(\"latest\");\n\n  sponsoredSort(flightList);\n  sponsoredSort(returnFlightList);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Trip to Destination\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: classes.tableList,\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Flight\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Departure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Destination\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Dep\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Arr\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Favourite\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Sponsored\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: flightList.map(flightDetails => /*#__PURE__*/_jsxDEV(MultiFlightItem, {\n          flightPackage: flightDetails,\n          selectedFlights: selectedFlight,\n          return: false,\n          selectFlight: res => res == true ? setReturnFlightSelected(true) : setFlightSelected(true),\n          selFlight: res => setSelectedFlight(res)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Return, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes.submitButt,\n      onClick: bookingFlightHandler,\n      children: \"Book Flights\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 509,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FlightList, \"0E2o0WRi/Ru78F0nJNHRiCwSMbY=\");\n\n_c = FlightList;\nexport default FlightList;\n\nvar _c;\n\n$RefreshReg$(_c, \"FlightList\");","map":{"version":3,"sources":["C:/Users/ewart/OneDrive/Documents/GitHub/flightpub/client/src/frontEnd/components/flights/FlightList.js"],"names":["FlightItem","classes","Card","useState","useContext","FlightPubContext","DropdownList","Button","MultiFlightItem","FlightList","props","context","flightList","setFlightList","returnFlightList","setReturnFlightList","flightSelected","setFlightSelected","selectedFlight","setSelectedFlight","returnFlightSelected","setReturnFlightSelected","selectedReturnFlight","setSelectedReturnFlight","flights","map","el","push","console","log","makeFlightStruct","e","flightRefs","split","constructor","arguments","multiSearch","FlightPoint","flightPoints","length","startIndex","departure","toLowerCase","searchQuery","departureLocation","validTime","flexibleDeparture","departureDate","getFullYear","soonestDepartureDate","getMonth","getDate","latestDepartureDate","destination","destinationLocation","tempP","el2","curr","dayAfter","Date","setDate","endIndex","i","sort","j","Return","oneWayTrip","tableList","flightDetails","res","bookingFlightHandler","flightArr","flight","setBookingsSelected","exportFlights","swap","arr","partition","lowBound","highBound","highCount","h","sponsored","piv","jCount","quickSort","low","high","partIndex","sponsoredSort","submitButt"],"mappings":"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","sourcesContent":["import FlightItem from './FlightItem';\r\nimport classes from './FlightList.module.css';\r\nimport Card from \"../ui/Card\";\r\nimport {useState} from \"react\";\r\nimport {useContext} from 'react';\r\nimport FlightPubContext from \"../../store/FlightPubContext\";\r\n\r\nimport DropdownList from \"react-widgets/DropdownList\";\r\nimport {Button} from \"@mui/material\";\r\nimport MultiFlightItem from \"./MultiFlightItem\";\r\n\r\n\r\nfunction FlightList(props) {\r\n\r\n    const context = useContext(FlightPubContext);\r\n\r\n    const [flightList, setFlightList] = useState([]);\r\n    const [returnFlightList, setReturnFlightList] = useState([]);\r\n\r\n    const [flightSelected , setFlightSelected] = useState(false);\r\n    const [selectedFlight, setSelectedFlight] = useState([]);\r\n    const [returnFlightSelected, setReturnFlightSelected] = useState(false);\r\n    const [selectedReturnFlight, setSelectedReturnFlight] = useState([]);\r\n\r\n    props.flights.map((el) =>\r\n    {\r\n        flightList.push(el);\r\n        returnFlightList.push(el);\r\n    });\r\n\r\n    if(flightSelected)\r\n    {\r\n        console.log(\"wow ur trip to is selected\");\r\n    }\r\n\r\n    if(returnFlightSelected)\r\n    {\r\n        console.log(\"wow way back selected\");\r\n    }\r\n\r\n    //struct to store flights in a reverse linkedList\r\n    //pattern for the multi-search algorithm\r\n    function makeFlightStruct(e)\r\n    {\r\n        var flightRefs = e.split(' ');\r\n\r\n\r\n        function constructor()\r\n        {\r\n            this[flightRefs[0]] = arguments[0];\r\n            this[flightRefs[1]] = arguments[1];\r\n        }\r\n        return constructor;\r\n    }\r\n\r\n    function multiSearch()\r\n    {\r\n        //todo\r\n        //create struct where each el has a ref to it's prev flightPoint except for the start of each search which uses null\r\n        //replace iterating through map to find matches with, iterating through returned database results\r\n        //\r\n        //flightList.length = 0;\r\n        //returnFlightList.length = 0;\r\n\r\n        var FlightPoint = makeFlightStruct(\"prev curr\");\r\n        var flightPoints = [];\r\n\r\n        flightList.length = 0;\r\n        returnFlightList.length = 0;\r\n\r\n        var startIndex = 0;\r\n\r\n        props.flights.map((el) => {\r\n\r\n            flightPoints.length = 0;\r\n            //find next start point\r\n            if(el.departure.toLowerCase() == props.searchQuery.departureLocation.toLowerCase())\r\n            {\r\n                var validTime = false;\r\n                if(!props.searchQuery.flexibleDeparture\r\n                    && el.departureDate.getFullYear() == props.searchQuery.soonestDepartureDate.getFullYear()\r\n                    && el.departureDate.getMonth() == props.searchQuery.soonestDepartureDate.getMonth()\r\n                    && el.departureDate.getDate() == props.searchQuery.soonestDepartureDate.getDate()\r\n                    || props.searchQuery.flexibleDeparture\r\n                    && el.departureDate.getFullYear() >= props.searchQuery.soonestDepartureDate.getFullYear()\r\n                    && el.departureDate.getFullYear() <= props.searchQuery.latestDepartureDate.getFullYear()\r\n                    && el.departureDate.getMonth() >= props.searchQuery.soonestDepartureDate.getMonth()\r\n                    && el.departureDate.getMonth() <= props.searchQuery.latestDepartureDate.getMonth()\r\n                    && el.departureDate.getDate() >= props.searchQuery.soonestDepartureDate.getDate()\r\n                    && el.departureDate.getDate() <= props.searchQuery.latestDepartureDate.getDate())\r\n                {\r\n                    validTime = true;\r\n                }\r\n\r\n                if(validTime)\r\n                {\r\n                    if(el.destination.toLowerCase() == props.searchQuery.destinationLocation.toLowerCase())\r\n                    {\r\n                        //add to flight list\r\n                        flightList.push([el])\r\n                        //don't include other results as they are meaningless and create a loop\r\n                    }\r\n                    else\r\n                    {\r\n                        var tempP = new FlightPoint(null, el);\r\n\r\n                        flightPoints.push(tempP);\r\n\r\n                        //search for flights from this node\r\n                        props.flights.map((el2) => {\r\n                            if(el2.departure.toLowerCase() == flightPoints[startIndex].curr.destination.toLowerCase())\r\n                            {\r\n                                //check flight occurs after last flight\r\n                                validTime = false;\r\n                                var dayAfter = new Date();\r\n                                dayAfter.setDate(el.departureDate.getDate() + 1);\r\n\r\n                                if(el.departureDate.getFullYear() == el2.departureDate.getFullYear()\r\n                                    && el.departureDate.getMonth() == el2.departureDate.getMonth()\r\n                                    && el.departureDate.getDate() == el2.departureDate.getDate()\r\n                                    ||\r\n                                    dayAfter.getFullYear() == el2.departureDate.getFullYear()\r\n                                    && dayAfter.getMonth() == el2.departureDate.getMonth()\r\n                                    && dayAfter.getDate() == el2.departureDate.getDate())\r\n                                {\r\n                                    validTime = true;\r\n                                }\r\n\r\n                                if(validTime)\r\n                                {\r\n                                    if(el2.destination.toLowerCase() == props.searchQuery.destinationLocation.toLowerCase())\r\n                                    {\r\n                                        flightList.push([el, el2])\r\n                                        //add to search results\r\n                                        //don't search further due to loop\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        flightPoints.push(new FlightPoint(flightPoints[startIndex], el2));\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n\r\n                        startIndex++;\r\n                        var endIndex = flightPoints.length;\r\n                        for(var i = startIndex; i < endIndex; i++)\r\n                        {\r\n                            props.flights.map((el2) => {\r\n\r\n                                if(el2.departure.toLowerCase() == flightPoints[i].curr.destination.toLowerCase() &&\r\n                                    el2.destination.toLowerCase() == props.searchQuery.destinationLocation.toLowerCase())\r\n                                {\r\n                                    //check if flight occurs after last flight\r\n                                    validTime = false;\r\n                                    var dayAfter = new Date();\r\n                                    dayAfter.setDate(flightPoints[i].curr.departureDate.getDate() + 1);\r\n\r\n                                    if(flightPoints[i].curr.departureDate.getFullYear() == el2.departureDate.getFullYear()\r\n                                        && flightPoints[i].curr.departureDate.getMonth() == el2.departureDate.getMonth()\r\n                                        && flightPoints[i].curr.departureDate.getDate() == el2.departureDate.getDate()\r\n                                        ||\r\n                                        dayAfter.getFullYear() == el2.departureDate.getFullYear()\r\n                                        && dayAfter.getMonth() == el2.departureDate.getMonth()\r\n                                        && dayAfter.getDate() == el2.departureDate.getDate())\r\n                                    {\r\n                                        validTime = true;\r\n                                    }\r\n\r\n                                    if(validTime)\r\n                                    {\r\n                                        //add flight to list\r\n                                        flightList.push([el, flightPoints[i].curr, el2]);\r\n                                        flightPoints.push(new FlightPoint(flightPoints[i], el2));\r\n                                    }\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n        }\r\n\r\n\r\n        })\r\n\r\n        //return trip details\r\n        /*if(!props.searchQuery.oneWayTrip) {\r\n            startIndex = 0;\r\n\r\n            props.flights.map((el) => {\r\n\r\n                flightPoints.length = 0;\r\n                //find next start point\r\n                if (el.departure.toLowerCase() == props.searchQuery.destinationLocation.toLowerCase()) {\r\n                    var validTime = false;\r\n                    if (!props.searchQuery.flexibleReturn\r\n                        && el.departureDate.getFullYear() == props.searchQuery.soonestReturnDate.getFullYear()\r\n                        && el.departureDate.getMonth() == props.searchQuery.soonestReturnDate.getMonth()\r\n                        && el.departureDate.getDate() == props.searchQuery.soonestReturnDate.getDate()\r\n                        || props.searchQuery.flexibleReturn\r\n                        && el.departureDate.getFullYear() >= props.searchQuery.soonestReturnDate.getFullYear()\r\n                        && el.departureDate.getFullYear() <= props.searchQuery.latestReturnDate.getFullYear()\r\n                        && el.departureDate.getMonth() >= props.searchQuery.soonestReturnDate.getMonth()\r\n                        && el.departureDate.getMonth() <= props.searchQuery.latestReturnDate.getMonth()\r\n                        && el.departureDate.getDate() >= props.searchQuery.soonestReturnDate.getDate()\r\n                        && el.departureDate.getDate() <= props.searchQuery.latestReturnDate.getDate()) {\r\n                        validTime = true;\r\n                    }\r\n\r\n                    if (validTime) {\r\n                        if (el.destination.toLowerCase() == props.searchQuery.departureLocation.toLowerCase()) {\r\n                            //add to flight list\r\n                            returnFlightList.push([el])\r\n                            //don't include other results as they are meaningless and create a loop\r\n                        } else {\r\n                            flightPoints.push(new FlightPoint(null, el));\r\n\r\n\r\n                            //search for flights from this node\r\n                            props.flights.map((el2) => {\r\n                                if (el2.departure.toLowerCase() == flightPoints[startIndex].curr.destination.toLowerCase()) {\r\n                                    //check flight occurs after last flight\r\n                                    validTime = false;\r\n                                    var dayAfter = new Date();\r\n                                    dayAfter.setDate(el.departureDate.getDate() + 1);\r\n\r\n                                    if (el.departureDate.getFullYear() == el2.departureDate.getFullYear()\r\n                                        && el.departureDate.getMonth() == el2.departureDate.getMonth()\r\n                                        && el.departureDate.getDate() == el2.departureDate.getDate()\r\n                                        ||\r\n                                        dayAfter.getFullYear() == el2.departureDate.getFullYear()\r\n                                        && dayAfter.getMonth() == el2.departureDate.getMonth()\r\n                                        && dayAfter.getDate() == el2.departureDate.getDate()) {\r\n                                        validTime = true;\r\n                                    }\r\n\r\n                                    if (validTime) {\r\n                                        if (el2.destination.toLowerCase() == props.searchQuery.departureLocation.toLowerCase()) {\r\n                                            returnFlightList.push([el, el2])\r\n                                            //add to search results\r\n                                            //don't search further due to loop\r\n                                        } else {\r\n                                            flightPoints.push(new FlightPoint(flightPoints[startIndex], el2));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n\r\n                            startIndex++;\r\n                            var endIndex = flightPoints.length;\r\n                            for (var i = startIndex; i < endIndex; i++) {\r\n                                props.flights.map((el2) => {\r\n\r\n                                    if (el2.departure.toLowerCase() == flightPoints[i].curr.destination.toLowerCase() &&\r\n                                        el2.destination.toLowerCase() == props.searchQuery.departureLocation.toLowerCase()) {\r\n                                        //check if flight occurs after last flight\r\n                                        validTime = false;\r\n                                        var dayAfter = new Date();\r\n                                        dayAfter.setDate(flightPoints[i].curr.departureDate.getDate() + 1);\r\n\r\n                                        if (flightPoints[i].curr.departureDate.getFullYear() == el2.departureDate.getFullYear()\r\n                                            && flightPoints[i].curr.departureDate.getMonth() == el2.departureDate.getMonth()\r\n                                            && flightPoints[i].curr.departureDate.getDate() == el2.departureDate.getDate()\r\n                                            ||\r\n                                            dayAfter.getFullYear() == el2.departureDate.getFullYear()\r\n                                            && dayAfter.getMonth() == el2.departureDate.getMonth()\r\n                                            && dayAfter.getDate() == el2.departureDate.getDate()) {\r\n                                            validTime = true;\r\n                                        }\r\n\r\n                                        if (validTime) {\r\n                                            //add flight to list\r\n                                            returnFlightList.push([el, flightPoints[i].curr, el2]);\r\n                                            flightPoints.push(new FlightPoint(flightPoints[i], el2));\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n\r\n\r\n            })\r\n        }\r\n\r\n         */\r\n    }\r\n\r\n    function sort(e)\r\n    {\r\n        console.log(e);\r\n        if(e == \"soonest\")\r\n        {\r\n            for(let i = 0; i < flightList.length; i++)\r\n            {\r\n                for(let j = 0; j < flightList.length - i - 1; j++)\r\n                {\r\n                    if(flightList[j+1][0].departureDate < flightList[j][0].departureDate)\r\n                    {\r\n                        [flightList[j+1], flightList[j]] = [flightList[j], flightList[j+1]];\r\n                    }\r\n                }\r\n            }\r\n\r\n            for(let i = 0; i < returnFlightList.length; i++)\r\n            {\r\n                for(let j = 0; j < returnFlightList.length - i - 1; j++)\r\n                {\r\n                    if(returnFlightList[j+1][0].departureDate < returnFlightList[j][0].departureDate)\r\n                    {\r\n                        [returnFlightList[j+1], returnFlightList[j]] = [returnFlightList[j], returnFlightList[j+1]];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function Return()\r\n    {\r\n        if(props.searchQuery.oneWayTrip)\r\n        {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n          <div>\r\n              <h2>Return Trip</h2>\r\n\r\n              <table className={classes.tableList}>\r\n                  <tr>\r\n                      <th>Flight</th>\r\n                      <th>Departure</th>\r\n                      <th>Destination</th>\r\n                      <th>Date</th>\r\n                      <th>Dep</th>\r\n                      <th>Arr</th>\r\n                      <th>Favorite</th>\r\n                      <th>Select</th>\r\n                      <th>Sponsored</th>\r\n                  </tr>\r\n                  <tbody>\r\n                  {returnFlightList.map((flightDetails) => (\r\n                      <MultiFlightItem\r\n                          flightPackage={flightDetails}\r\n                          selectedFlights={selectedReturnFlight}\r\n                          return={true}\r\n                          selectFlight={res => res == true ? setReturnFlightSelected(true) : setFlightSelected(true)}\r\n                          selFlight={res => setSelectedReturnFlight(res)}\r\n                      />\r\n                  ))}\r\n                  </tbody>\r\n              </table>\r\n          </div>\r\n        );\r\n    }\r\n\r\n    function bookingFlightHandler()\r\n    {\r\n        const flightArr = [];\r\n\r\n        if(props.searchQuery.oneWayTrip)\r\n        {\r\n\r\n           if(flightSelected)\r\n           {\r\n               selectedFlight.map((flight) =>\r\n               {\r\n                   //console.log(flight);\r\n                   flightArr.push(flight);\r\n               })\r\n\r\n               //move onto next phase\r\n               context.setBookingsSelected(true);\r\n               //console.log(context.bookingsSelected);\r\n               props.exportFlights(flightArr);\r\n               return;\r\n           }\r\n        }\r\n        else\r\n        {\r\n            if(flightSelected && returnFlightSelected)\r\n            {\r\n                selectedFlight.map((flight) =>\r\n                {\r\n                    flightArr.push(flight);\r\n                })\r\n                selectedReturnFlight.map((flight) =>\r\n                {\r\n                    flightArr.push(flight);\r\n                })\r\n\r\n                context.setBookingsSelected(true);\r\n                //console.log(context.bookingsSelected);\r\n                props.exportFlights(flightArr);\r\n                return;\r\n            }\r\n        }\r\n\r\n        //some error has occured\r\n        console.log(\"you have not selected a return or departure flights\");\r\n        return;\r\n    }\r\n\r\n    function swap(arr, i ,j)\r\n    {\r\n        [arr[j], arr[i]] = [arr[i], arr[j]];\r\n    }\r\n\r\n    function partition(arr, lowBound, highBound)\r\n    {\r\n        var highCount = 0;\r\n\r\n\r\n        for(let h = 0; h < arr[highBound].length; h++)\r\n        {\r\n            if(arr[highBound][h].sponsored == true)\r\n            {\r\n                highCount += 1;\r\n            }\r\n        }\r\n\r\n        let piv = highCount;\r\n        let i = lowBound - 1;\r\n\r\n        for(let j = lowBound; j <= highBound - 1; j++)\r\n        {\r\n            var jCount = 0;\r\n\r\n            for(let h = 0; h < arr[j].length; h++)\r\n            {\r\n                if(arr[j][h].sponsored == true)\r\n                {\r\n                    jCount += 1;\r\n                }\r\n            }\r\n\r\n            if(jCount > piv)\r\n            {\r\n                i++;\r\n                swap(arr, i, j);\r\n            }\r\n        }\r\n        swap(arr, i  + 1, highBound);\r\n        return (i + 1);\r\n    }\r\n\r\n    function quickSort(arr, low, high)\r\n    {\r\n\r\n        if(low < high)\r\n        {\r\n            let partIndex = partition(arr, low, high);\r\n            quickSort(arr, low, partIndex - 1);\r\n            quickSort(arr, partIndex + 1, high);\r\n        }\r\n    }\r\n\r\n    function sponsoredSort(arr)\r\n    {\r\n        quickSort(arr, 0, arr.length - 1);\r\n        /*for(let i = 0; i < arr.length; i++)\r\n        {\r\n            for(let j = 0; j < arr.length - i - 1; j++)\r\n            {\r\n                var nextSponsoredCount = 0;\r\n                var thisSponsoredCount = 0;\r\n\r\n\r\n                for(let h = 0; h < arr[j + i].length; h++)\r\n                {\r\n                    if(arr[j + 1][h].sponsored == true)\r\n                    {\r\n                        nextSponsoredCount += 1;\r\n                    }\r\n                }\r\n\r\n                for(let h = 0; h < arr[j].length; h++)\r\n                {\r\n                    if(arr[j][h].sponsored == true)\r\n                    {\r\n                        thisSponsoredCount += 1;\r\n                    }\r\n                }\r\n\r\n                if(nextSponsoredCount > thisSponsoredCount)\r\n                {\r\n                    [arr[j+1], arr[j]] = [arr[j], arr[j+1]];\r\n                }\r\n            }\r\n        }*/\r\n    }\r\n\r\n    multiSearch();\r\n    //searchFlightList();\r\n    //sort(\"latest\");\r\n    sponsoredSort(flightList);\r\n    sponsoredSort(returnFlightList);\r\n\r\n\r\n    return (\r\n\r\n        <Card>\r\n            <h2>Trip to Destination</h2>\r\n\r\n            <table className={classes.tableList}>\r\n                <tr>\r\n                    <th>Flight</th>\r\n                    <th>Departure</th>\r\n                    <th>Destination</th>\r\n                    <th>Date</th>\r\n                    <th>Dep</th>\r\n                    <th>Arr</th>\r\n                    <th>Favourite</th>\r\n                    <th>Select</th>\r\n                    <th>Sponsored</th>\r\n                </tr>\r\n                <tbody>\r\n                    {flightList.map((flightDetails) => (\r\n                        <MultiFlightItem\r\n                            flightPackage={flightDetails}\r\n                            selectedFlights={selectedFlight}\r\n                            return={false}\r\n                            selectFlight={res => res == true ? setReturnFlightSelected(true) : setFlightSelected(true)}\r\n                            selFlight={res => setSelectedFlight(res)}\r\n                        />\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n\r\n            <Return />\r\n\r\n\r\n            <button className={classes.submitButt} onClick={bookingFlightHandler}>\r\n                Book Flights\r\n            </button>\r\n\r\n        </Card>\r\n\r\n    );\r\n}\r\n\r\nexport default FlightList;\r\n"]},"metadata":{},"sourceType":"module"}